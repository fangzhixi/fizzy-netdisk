package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resource_config_conf_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbf\x4e\xc2\x40\x1c\xc7\xf7\x4b\xee\x1d\x7e\x09\xb3\xed\x81\xa9\xc0\x8d\x2c\x3e\x46\x73\xb6\x3f\x4a\xc3\xd1\xbb\xb4\x47\x93\x32\x19\x17\x13\x4d\xe3\x64\xd4\xc4\xc5\x0d\x07\x99\x1c\x54\x02\x4f\xd3\x82\xbc\x85\x69\x8f\x85\xc4\xf1\x7e\x9f\xef\xbf\xc3\x24\xe7\x10\x62\x4e\x89\xd0\xda\x4f\xc4\x0c\x39\x8c\xe3\xc5\xa2\x38\x0b\xe3\x6c\x4a\x89\x54\x91\x2f\x31\x47\xc9\xc1\xb3\x2f\x2d\xcc\x84\x83\x54\x51\x84\xa9\x4b\x89\x8c\x33\x83\x89\x2f\xc2\x30\xc5\x2c\xe3\xe0\x31\xc6\x86\x94\xe8\xf9\x95\x8c\x03\x7f\x8a\xc5\xd1\x10\xa8\x64\x1c\x47\xae\xbd\x3b\x53\x2c\x28\xd1\x69\x9c\x0b\x83\xff\x88\x2c\xb0\xaa\x54\x29\xd3\xe2\x93\x75\x09\x1a\x3b\x90\x92\x0e\x54\x5f\xeb\xdd\x6b\x59\xdf\xbd\xd5\x2f\xcb\xdf\xd5\x76\xbf\x59\x51\x92\xe2\x4c\x19\xf4\x9b\x44\x0e\x94\x00\x74\xaa\xed\x7d\xac\x39\xc0\xc4\x18\xcd\x5d\xb7\xdb\xeb\x3b\xcc\x61\x4e\x97\x0f\xd8\x80\x35\x8a\x86\x1e\xa1\x54\x81\x90\x13\x95\x99\xe6\x1e\xa5\x6a\xae\x8f\xc5\x4d\x61\x0b\x6d\x72\x1b\x0c\xfb\xf7\x9f\xc3\xd3\x67\xfd\xf1\x5c\xdf\x2c\xab\x4d\xd9\xf6\x03\x58\x99\xfd\x98\xe3\x9e\xcc\x76\xad\xaf\x2e\x1f\xab\x4d\x39\x2a\x0c\x72\xd8\x5d\xaf\xeb\xd5\xf7\xe1\xf6\x01\xbc\xcb\x51\x83\x8d\x32\x42\xfa\x99\x16\x01\x72\xf0\xce\x2f\x06\x7d\x36\xec\xf6\xd8\x5f\x00\x00\x00\xff\xff\xf8\x90\x5d\x5d\xb1\x01\x00\x00")

func resource_config_conf_yaml() ([]byte, error) {
	return bindata_read(
		_resource_config_conf_yaml,
		"resource/config/conf.yaml",
	)
}

var _resource_config_conf_dev_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbf\x4e\xc2\x40\x1c\xc7\xf7\x4b\xee\x1d\x7e\x09\xb3\xed\x81\xa9\xc0\x8d\x2c\x3e\x46\x73\xb6\x3f\x4a\xc3\xd1\xbb\xb4\x47\x93\x32\x19\x17\x13\x4d\xe3\x64\xd4\xc4\xc5\x0d\x07\x99\x1c\x54\x02\x4f\xd3\x82\xbc\x85\x69\x8f\x85\xc4\xf1\x7e\x9f\xef\xbf\xc3\x24\xe7\x10\x62\x4e\x89\xd0\xda\x4f\xc4\x0c\x39\x8c\xe3\xc5\xa2\x38\x0b\xe3\x6c\x4a\x89\x54\x91\x2f\x31\x47\xc9\xc1\xb3\x2f\x2d\xcc\x84\x83\x54\x51\x84\xa9\x4b\x89\x8c\x33\x83\x89\x2f\xc2\x30\xc5\x2c\xe3\xe0\x31\xc6\x86\x94\xe8\xf9\x95\x8c\x03\x7f\x8a\xc5\xd1\x10\xa8\x64\x1c\x47\xae\xbd\x3b\x53\x2c\x28\xd1\x69\x9c\x0b\x83\xff\x88\x2c\xb0\xaa\x54\x29\xd3\xe2\x93\x75\x09\x1a\x3b\x90\x92\x0e\x54\x5f\xeb\xdd\x6b\x59\xdf\xbd\xd5\x2f\xcb\xdf\xd5\x76\xbf\x59\x51\x92\xe2\x4c\x19\xf4\x9b\x44\x0e\x94\x00\x74\xaa\xed\x7d\xac\x39\xc0\xc4\x18\xcd\x5d\xb7\xdb\xeb\x3b\xcc\x61\x4e\x97\x0f\xd8\x80\x35\x8a\x86\x1e\xa1\x54\x81\x90\x13\x95\x99\xe6\x1e\xa5\x6a\xae\x8f\xc5\x4d\x61\x0b\x6d\x72\x1b\x0c\xfb\xf7\x9f\xc3\xd3\x67\xfd\xf1\x5c\xdf\x2c\xab\x4d\xd9\xf6\x03\x58\x99\xfd\x98\xe3\x9e\xcc\x76\xad\xaf\x2e\x1f\xab\x4d\x39\x2a\x0c\x72\xd8\x5d\xaf\xeb\xd5\xf7\xe1\xf6\x01\xbc\xcb\x51\x83\x8d\x32\x42\xfa\x99\x16\x01\x72\xf0\xce\x2f\x06\x7d\x36\xec\xf6\xd8\x5f\x00\x00\x00\xff\xff\xf8\x90\x5d\x5d\xb1\x01\x00\x00")

func resource_config_conf_dev_yaml() ([]byte, error) {
	return bindata_read(
		_resource_config_conf_dev_yaml,
		"resource/config/conf_dev.yaml",
	)
}

var _resource_config_conf_prod_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6e\xea\x30\x14\xc7\x77\x4b\x7e\x87\x23\x31\xdf\xc4\x70\x95\x0b\x78\x64\xb9\x8f\x11\xb9\xc9\x21\x44\x98\xd8\x72\x0c\x52\x98\xaa\x2e\x95\x5a\x45\x9d\xaa\xb6\x52\x97\x6e\x74\x28\x53\x87\xb6\x08\x9e\x26\x81\xf2\x16\x55\x62\x16\xa4\x8e\x3e\xbf\xff\x97\x31\x5b\x70\xd0\x46\xc5\x94\x08\xad\xc3\x4c\xcc\x90\xc3\x38\x5d\x2e\x8b\x3f\x71\x9a\x4f\x29\x91\x2a\x09\x25\x2e\x50\x72\x08\xdc\x4b\x0b\x3b\xe1\x20\x55\x92\xa0\xf1\x29\x91\x69\x6e\x31\x0b\x45\x1c\x1b\xcc\x73\x0e\x01\x63\x6c\x48\x89\x9e\x5f\xc8\x34\x0a\xa7\x58\x9c\x0c\x91\xca\xc6\x69\xe2\xbb\xbb\x37\xc5\x82\x12\x6d\xd2\x85\xb0\xf8\x8b\xc8\x01\xa7\x32\x4a\xd9\x16\x9f\xad\xcb\xd0\xba\x81\x94\x74\xa0\xfa\xd8\xec\x9f\xcb\xfa\xe6\xa5\x7e\x5a\x7d\xaf\x77\x87\xed\x9a\x12\x83\x33\x65\x31\x6c\x12\x39\x50\x02\xd0\xa9\x76\xb7\xa9\xe6\x00\x13\x6b\x35\xf7\xfd\x6e\xaf\xef\x31\x8f\x79\x5d\x3e\x60\x03\xd6\x28\x1a\x7a\x82\x52\x45\x42\x4e\x54\x6e\x9b\x7b\x62\xd4\x5c\x9f\x8a\x9b\xc2\x16\xba\xe4\x36\x18\x0e\xaf\x5f\xc7\x87\xf7\xfa\xed\xb1\xbe\x5a\x55\xdb\xb2\xed\x07\x70\x32\xf7\x31\xcf\x3f\x9b\xed\x3b\x5f\x5d\xde\x57\xdb\x72\x54\x58\xe4\xb0\xbf\xdc\xd4\xeb\xcf\xe3\xf5\x1d\x04\xff\x47\x0d\xb6\xca\x0a\x19\xe6\x5a\x44\xc8\x21\xf8\xfb\x6f\xd0\x67\xc3\x6e\x8f\xfd\x04\x00\x00\xff\xff\xb8\x01\xa0\xf7\xb2\x01\x00\x00")

func resource_config_conf_prod_yaml() ([]byte, error) {
	return bindata_read(
		_resource_config_conf_prod_yaml,
		"resource/config/conf_prod.yaml",
	)
}

var _resource_config_conf_test_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcf\x4e\xc2\x30\x1c\xc7\xef\x4d\xfa\x0e\xbf\x84\xb3\x5b\xc1\x4c\xa0\x47\x2e\x3e\xc6\x52\xc7\x8f\xd1\x50\xd6\x66\x2b\x24\xe3\x64\xbc\x98\x68\x16\x4f\x46\x4d\xbc\x78\xc3\x83\x9c\x3c\xa8\x04\x9e\x66\x03\x79\x0b\xb3\x95\x0b\x89\xc7\xf6\xf3\xfd\xd7\x62\x32\xe7\x60\x31\xb3\x94\x08\x63\xc2\x44\x4c\x91\xc3\x48\x2e\x16\xf9\xd9\x50\x66\x13\x4a\x94\x8e\x43\x85\x73\x54\x1c\x02\x77\x32\xc2\x8e\x39\x28\x1d\xc7\x98\xfa\x94\x28\x99\x59\x4c\x42\x31\x1c\xa6\x98\x65\x1c\x02\xc6\x58\x9f\x12\x33\xbb\x52\x32\x0a\x27\x98\x1f\x0d\x91\x4e\x46\x32\xf6\xdd\xbd\x37\xc1\x9c\x12\x93\xca\xb9\xb0\xf8\x8f\xc8\x01\xa7\x4a\xb5\xb6\x0d\x3e\x59\x97\xa0\x75\x03\x29\x69\x41\xf9\xb5\xde\xbd\x16\xd5\xdd\x5b\xf5\xb2\xfc\x5d\x6d\xf7\x9b\x15\x25\x29\x4e\xb5\xc5\xb0\x4e\xe4\x40\x09\x40\xab\xdc\xde\x4b\xc3\x01\xc6\xd6\x1a\xee\xfb\xed\x4e\xd7\x63\x1e\xf3\xda\xbc\xc7\x7a\xac\x56\xd4\xf4\x08\x95\x8e\x84\x1a\xeb\xfa\x5f\x00\xe2\x54\xcf\xcc\xb1\xb8\x2e\x6c\xa0\x4b\x6e\x82\x61\xff\xfe\x73\x78\xfa\xac\x3e\x9e\xab\x9b\x65\xb9\x29\x9a\x7e\x00\x27\x73\x0f\xf3\xfc\x93\xd9\xbe\xf3\x55\xc5\x63\xb9\x29\x06\xb9\x45\x0e\xbb\xeb\x75\xb5\xfa\x3e\xdc\x3e\x40\x70\x39\xa8\xb1\xd5\x56\xa8\x30\x33\x22\x42\x0e\xc1\xf9\x45\xaf\xcb\xfa\xed\x0e\xfb\x0b\x00\x00\xff\xff\xac\xd6\x82\xec\xb2\x01\x00\x00")

func resource_config_conf_test_yaml() ([]byte, error) {
	return bindata_read(
		_resource_config_conf_test_yaml,
		"resource/config/conf_test.yaml",
	)
}

var _resource_keystore_master_attestation_key = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\x4b\x8e\x82\x30\x18\x00\xe0\xab\x70\x01\x32\x40\x07\x26\x2c\xdb\xe9\x6f\x81\x3e\x04\x2d\x0f\xdd\x11\x2d\x1a\x03\x82\x11\xa9\xe1\xf4\x6e\xbd\xc1\xe7\x12\x60\xa9\x72\x24\xde\x6b\xd8\x39\x1c\x0e\x6e\x83\x2e\xda\xd2\x67\xe2\x19\xef\xdf\xb0\x24\xa2\x85\x17\xc7\xa5\x46\x4d\x26\xc4\xcf\x6a\x6c\x4a\x71\x81\x09\x1e\x53\xd2\xf9\x47\xbb\x09\xd0\xc0\x4e\x4b\xb7\x28\x2e\xe3\x73\x3f\xcb\x90\x4c\xef\xa5\xcd\x59\x59\x6f\x27\xf2\x10\xfd\xfd\x2f\x54\x59\xf5\xd2\x19\x97\xf4\x57\x5c\x23\x34\xe4\xc1\x5c\xc3\x20\x75\x65\x56\x18\x6d\x6b\x61\xf6\x6f\xdc\x05\x45\xbf\x15\x9f\x00\x00\x00\xff\xff\xdb\x17\x20\xa8\x98\x00\x00\x00")

func resource_keystore_master_attestation_key() ([]byte, error) {
	return bindata_read(
		_resource_keystore_master_attestation_key,
		"resource/keystore/master-attestation.key",
	)
}

var _resource_keystore_private_key = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd5\xb7\x0e\xa3\x50\x02\x85\xe1\x1e\x89\x77\x98\x1e\xad\xc8\xd8\x94\x97\xe8\x4b\x30\x06\x0c\x06\x3a\x72\xce\x06\x0c\x4f\xbf\x9a\xd9\x7a\x4f\x7b\x9a\xbf\xfb\xfe\xf3\x77\x82\xac\xc2\xe7\x1f\xc7\x05\x7f\x5e\x0e\xf4\xc1\x5b\xfe\xa3\xcb\xe1\xbf\x07\x45\x4c\x08\xe5\xf1\x80\x02\x00\xba\x08\x6c\x19\x10\x90\xe7\x3e\xa4\x45\x68\x25\xf0\x71\x75\x25\x8d\x4a\x1b\xf2\xde\xd1\xd8\x3c\xf2\x4c\xcd\xd6\xb9\xd1\x03\xaf\xbd\x3a\x4e\xdd\x5b\xa9\xf7\x8d\x41\x91\x5d\xeb\xc5\xca\xff\xcd\x3c\x3c\x49\x59\xee\x08\xa3\xf4\x26\x3c\x2c\x94\x59\xa9\xeb\x80\x30\xb9\xda\x38\x65\x01\xc8\x35\x3d\x52\x09\x77\x3c\x95\x50\x1a\x71\x78\xe5\xd6\xb8\x9c\x69\x1a\x03\x03\x45\xc0\x6f\xba\xb2\xec\x39\xe5\xb3\xa6\x06\x73\x2f\x7b\x96\x7a\xd1\x3f\x5c\x1e\x9e\xcb\xf6\x2d\x8a\x55\x9a\x95\x76\x94\xe8\x00\x1b\x05\xaa\x7c\x86\xc2\x59\x67\x23\xb1\x2a\x38\xa5\xa4\xfc\x79\xfe\x64\x14\xa1\x2b\x7d\xfc\x70\x4a\x4f\xb8\x77\x37\xbf\x9a\x45\x1f\x42\xeb\xc7\x44\x58\x2b\x1e\x9f\x8f\x42\x95\xcd\xdb\x9a\x0f\xc8\xdc\x64\x56\x35\x25\x72\x98\xf2\x4e\x6a\x0e\x8c\x5a\x63\xcb\x2f\x15\xfe\xf7\x46\x91\xd9\x36\x83\x98\xef\xed\x1f\xa1\x04\x94\x18\x17\xf0\x50\x0b\x2b\xde\x12\xb8\xb9\xc2\x9d\xfc\xdd\x0a\xc6\x2c\xec\x58\x89\x4e\x3d\x68\xac\x5a\xd0\x1e\x52\x99\xca\x23\xff\xf3\x5c\xcc\x22\x2c\x67\x43\x91\x32\x4f\xc3\x10\x17\x6e\x57\x49\xfc\xfc\xc2\x25\x5e\x6e\xa5\x56\xaf\x22\xaf\x3a\x62\xfa\xba\x63\xd2\x95\xf8\x73\xb5\xa1\x04\x6c\x20\x80\x11\x0a\x40\x61\x6a\xfe\x39\x51\x92\x26\x63\xd1\xcc\x44\x28\x52\x66\x11\x77\xd5\xf6\xe2\xb5\xd6\x40\x82\x28\x7b\x09\x76\x49\x36\xe7\x47\xb2\xc6\xeb\xc4\xbe\xb8\x90\x9f\x27\x17\xec\x75\x21\x08\x0f\x72\x64\x88\x38\x50\x80\x15\xbc\x0d\xc3\xcc\xec\x63\x50\x68\x14\xb1\xb2\xef\x01\x6f\x5a\x21\x58\xeb\xe4\xe4\xe0\x2b\x9a\xd3\x10\x82\x91\xf1\x1e\x4e\xc4\xde\xf9\xe7\xbc\x2e\xfa\xa5\xbb\xac\xe5\x0c\x94\x7f\x24\x3f\xfb\x7b\x5d\xf2\x39\xb2\x38\x5b\x08\x5a\x05\x5c\x14\xa9\xa1\x67\x89\xe5\x94\xe1\xb7\xec\xce\x8f\x60\xeb\x1f\xcc\xd5\x44\x45\x12\xbb\xe1\x1e\x96\x85\xf8\x7e\xf6\x57\xe8\x41\x1e\x6e\x5e\xf3\xc4\xcf\x06\xc8\x33\x69\x1e\x0f\xf3\xd2\x49\x0a\xbc\x84\x0e\x45\x4c\x0f\xa6\x6f\xeb\xbb\x38\xd8\x83\xe1\x06\x0d\xc6\xf3\xcc\xb5\xdf\x6b\x12\xc8\x60\x31\x8c\x10\xf6\x6d\x0d\xab\xa1\x38\xb6\xb7\xf4\x0e\x7e\x8c\xaa\x2d\x06\x71\xbd\xe3\xfa\x2b\xf0\xdb\x43\xd9\x34\x14\x91\xda\xb2\xf6\xbc\x07\xbe\x0f\xda\x72\x91\x67\xfc\x75\x12\xa5\xc8\xea\xba\x7e\xe8\x9a\xc9\xb2\x3e\x65\xeb\x71\x43\xe4\xf2\xc5\x3f\x3f\xd3\x24\x8a\x27\x3e\xaa\xea\x72\xb4\x81\x18\xa6\x66\xdd\xd3\x28\x92\x25\x5e\x6c\x97\xb2\x58\x86\x32\xe0\x40\x24\x74\x8b\x27\x13\x40\xaa\x4e\xb9\xaa\x56\xcc\x18\x4a\xea\xc9\x56\x94\xf4\xcb\xc7\xbc\x62\x89\xc8\x2c\xae\xfb\x97\xbe\x70\x70\x7c\xec\x35\x23\xb3\x09\x45\x6a\xcd\xec\xb1\x86\x71\xdf\x25\x6b\x6b\x6f\x87\xe4\xb1\xb4\x99\xbb\x89\x19\x28\x5d\xb5\x9c\x27\x9c\xec\xea\x25\x2c\x7e\xb3\xa5\xf7\x1d\xff\x8c\xf2\x70\x74\x77\x6b\x36\xe5\x43\x11\xbe\xf9\x46\x49\x28\x12\x8e\xfb\x06\x9a\x52\x20\xac\x19\xa4\x5d\xf6\xba\xd4\x5b\x55\x0d\x8b\x78\xd0\xe6\x6a\x16\xb3\x91\x3a\xd2\x95\xda\xc3\x84\x7f\xb6\x6b\x33\x8f\x70\x17\x5f\xd9\x31\xff\xaf\x99\xad\xce\x07\x8a\x24\xc9\xe2\x0b\x7c\x31\x19\x2f\x47\xf3\xcd\x93\x81\xfc\x94\xb0\x0a\xc1\x95\x37\x0a\xab\xd8\x5e\x10\xfb\xf7\x3d\x69\xe7\xc7\xef\xde\x0b\x43\xcf\xe6\x1c\x31\x2b\xf6\x9a\x12\x33\xc1\x51\xcb\x18\x56\x28\x92\x57\x6e\xd4\xd5\x7b\x42\xe3\x72\xe6\x0b\x6c\xbf\xae\x7c\x86\x51\x0c\x11\xf6\x9e\xa2\x1f\x19\xa9\x28\x82\xae\x6c\x3f\xf6\x05\x76\x1d\x9e\xb7\x41\xd0\x5c\x1a\xd2\x47\xa4\xa8\x89\x2a\x9e\x9e\x80\x22\x3c\xa7\xed\x46\x0c\x1c\xe3\x65\x0d\xbc\xcf\xb6\x97\xc3\x1b\x7a\xa1\x5a\xc6\x6f\x5f\xe1\xbe\xf4\xca\xd6\x1a\xb6\xf3\xb7\x1a\x78\x4d\xdd\xf9\xc1\x5c\x7a\x85\x8f\x49\xef\x67\x64\x08\x74\x1b\xa0\x88\x61\x1a\x55\x1e\xa4\x8b\x99\xbe\x47\xad\xb3\x89\x3e\x89\xe0\xb4\xdd\xb1\x75\xbd\x93\x33\xb5\xd8\x92\xde\x39\x7e\x35\x7d\x45\x7e\x73\x08\x69\xb8\xd9\xbd\x34\x96\x7a\x96\x08\xb4\xc2\xac\xaf\x79\x44\x91\x4e\x1a\x52\x59\x1e\x8c\xac\x25\xef\x0a\xcf\xa6\x77\x78\x6c\xb7\x98\x85\x32\x59\xe0\x63\x91\x06\x57\x3e\x88\x92\x06\xd6\x01\x1f\x9e\x1a\xb5\x9a\x21\xc5\x26\x71\xd4\x48\x2d\x3e\x83\xcf\x8e\x2f\x28\x52\xf4\xc6\x79\x2e\x87\xa5\x04\xba\xdd\x4d\x8e\x18\x2d\x26\x3c\x6c\x5d\x28\xd5\x7a\x88\x5e\xb5\x4c\xb6\x13\xe0\x6a\xaa\x23\xe1\x11\x4f\xc4\x49\x4b\x06\x3e\x0d\x73\x4b\xdf\x74\xbf\x31\xec\xe5\x86\x22\xc6\xfa\x15\x83\x76\x06\xf4\x53\x2c\x9c\x0c\x54\x52\x1b\x51\xcb\x8e\xb9\xce\x91\x99\x7b\x28\x51\x6e\xb0\x03\x6e\x69\xe1\x91\xed\x94\xc4\x99\x81\xae\xb5\x43\x80\x61\xcc\xa3\xcc\x23\x72\xce\x57\x14\xc9\xd4\x40\xee\xd7\xf8\x0c\x8a\x68\x8b\xd5\x64\xbb\xe3\x2f\xa7\xfa\xb2\x58\x46\xe5\x9b\xf6\xbb\x7a\xd6\xfb\x98\xb4\x6d\xd4\xdf\x7c\x6e\xdd\xa8\x60\xb6\xb0\x7e\xdf\x63\x07\xb7\x21\xb0\x2d\x20\x3f\x50\x24\x95\xde\x15\x18\x55\x01\xc0\xf6\xa2\x58\x92\x0e\x0e\x61\x14\x1a\x2c\x0d\x54\x5a\x93\x98\x71\x77\x1b\xf7\x35\x1d\x62\x05\x7c\x25\xc1\x5e\x4e\xf4\x91\x2d\x85\x79\xf2\x24\xff\x96\xac\x24\x38\x13\x14\xa1\x22\xa3\xe6\x07\x97\x83\xb2\xd9\x74\x6e\x35\xba\x7a\x31\x6d\xb6\xe2\x9d\x0a\xac\x49\x5f\xcb\x13\x92\xdb\x7d\xcc\xe4\xeb\x18\xa8\xde\x30\xd5\x01\xf3\x6d\x8d\x69\x35\x04\x72\x55\x68\x95\xc2\x50\xa4\x72\x35\xe6\x73\x88\x53\xb2\x56\x9e\x53\x1a\xc6\x88\x77\x9c\xcc\x0d\x38\x33\x01\xf8\x5a\xc5\xb9\x4c\x80\x33\x74\x3b\x8b\xd9\xc7\xa8\x9a\x16\xbd\x51\x43\x82\x22\xff\xb0\x91\x9f\xd2\xff\x41\xe8\xbf\x01\x00\x00\xff\xff\x67\x69\xf7\x6b\xa6\x06\x00\x00")

func resource_keystore_private_key() ([]byte, error) {
	return bindata_read(
		_resource_keystore_private_key,
		"resource/keystore/private.key",
	)
}

var _resource_keystore_public_key = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd1\x4d\x73\xa2\x30\x00\xc6\xf1\x3b\x33\x7c\x87\xde\x9d\x1d\x22\x5a\x2c\xc7\x04\x12\x36\xbc\x45\x8a\x28\x78\x43\x84\x00\x8a\x01\xa9\x25\xf0\xe9\x77\xda\xe3\x3e\xc7\xe7\x7f\xfc\xfd\xf9\x19\xc2\x0e\x0d\xdf\xf6\x09\xf2\xa9\xf5\xe6\xe1\xec\xf7\x54\x95\x80\x52\x44\x5b\x18\x22\x7e\x1b\xea\x5b\xe3\x98\x13\x40\x30\xc2\x04\x42\x66\xc1\xe8\x03\xfe\x74\x8b\x7b\x16\x8c\x30\x04\xd4\x34\x4e\x6b\x06\x5c\x0e\x8f\x9a\x33\xae\xfd\xda\x7d\xa8\x4a\xd9\x7d\xba\xef\xe5\x39\x09\xdc\xc8\x33\x44\x02\xf7\xdf\xf5\x34\x7b\xc9\xa8\x1f\x76\xdb\x6f\xb7\xb3\xea\xa3\x1c\x4c\x3a\xaf\x31\xbe\x03\x9f\x27\xbd\x96\x55\x64\x20\x4d\x93\x82\xc0\x68\xfc\x19\xab\x0a\x82\xb8\xd9\x08\xfd\x62\x4c\x21\xc9\x6c\xa1\xd1\xa5\x64\xe2\x39\x17\x45\x0e\x7d\x28\xfb\xe5\x7a\x0d\xfb\x72\x70\x9d\x74\xe8\x70\xc2\x9c\x65\x23\x35\xfc\x08\x9f\xaf\xaf\xaa\x1a\xed\x81\xdc\x54\x45\xd8\x9b\x74\x25\x90\xce\xc3\x0c\xcd\xcd\x55\x80\x91\x68\x3a\x29\xcc\x79\x96\x78\x53\x7b\xe2\x64\x90\x0e\xc4\x1f\x71\xb9\xb4\x4f\xef\x91\x31\xb9\x3d\xaf\x6e\xd6\x74\x3a\x11\x9d\xb7\x07\x36\xa8\xca\x44\xb7\x3b\xfc\xee\x04\xf6\xfa\xd1\x97\x77\xbb\x9d\x56\xfa\x98\xb3\x23\x27\xa6\x3c\x0c\x51\x90\xe6\x66\x17\x49\x40\x52\xdd\xca\x2b\x3a\x39\x15\xcb\x5f\x17\xfa\x8a\xd1\xc7\x5a\xee\xaa\x6d\x50\xa9\x4a\x94\x93\xf3\xec\xa5\x2d\x6b\x90\xfb\xd7\xe6\x05\x16\xa6\x4c\xe2\x15\x03\xec\xf3\xc5\xcb\x22\xcb\x34\xb4\x5b\x38\x90\xc7\x2a\x06\xfb\xb8\x76\xea\x7d\x55\xd6\x77\xd0\x7f\xc5\xe2\x72\xe7\x5a\xa8\x2a\x63\x44\x6d\x18\x41\xa4\x2a\xbf\x38\x38\xb4\xff\xf7\xfa\x17\x00\x00\xff\xff\x3b\xed\xc4\xc3\xca\x01\x00\x00")

func resource_keystore_public_key() ([]byte, error) {
	return bindata_read(
		_resource_keystore_public_key,
		"resource/keystore/public.key",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resource/config/conf.yaml":                resource_config_conf_yaml,
	"resource/config/conf_dev.yaml":            resource_config_conf_dev_yaml,
	"resource/config/conf_prod.yaml":           resource_config_conf_prod_yaml,
	"resource/config/conf_test.yaml":           resource_config_conf_test_yaml,
	"resource/keystore/master-attestation.key": resource_keystore_master_attestation_key,
	"resource/keystore/private.key":            resource_keystore_private_key,
	"resource/keystore/public.key":             resource_keystore_public_key,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resource/config/conf.yaml":                &_bintree_t{resource_config_conf_yaml, map[string]*_bintree_t{}},
	"resource/config/conf_dev.yaml":            &_bintree_t{resource_config_conf_dev_yaml, map[string]*_bintree_t{}},
	"resource/config/conf_prod.yaml":           &_bintree_t{resource_config_conf_prod_yaml, map[string]*_bintree_t{}},
	"resource/config/conf_test.yaml":           &_bintree_t{resource_config_conf_test_yaml, map[string]*_bintree_t{}},
	"resource/keystore/master-attestation.key": &_bintree_t{resource_keystore_master_attestation_key, map[string]*_bintree_t{}},
	"resource/keystore/private.key":            &_bintree_t{resource_keystore_private_key, map[string]*_bintree_t{}},
	"resource/keystore/public.key":             &_bintree_t{resource_keystore_public_key, map[string]*_bintree_t{}},
}}
